<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.awethumb.repository.dao.AdminDAO">


<!-- 신고목록 셀렉 처리안된거부터 셀렉하고 밑에다가 처리된거 끌어오는 쿼리-->
<select id="selectReport" resultType="Report">
	select *
	  from report_tb
  order by report_status ASC, report_no DESC;
</select>

<!-- 유저 아이디 셀렉 -->
<select id="selectUserId" parameterType="int" resultType="String">
	select user_id
	  from user_tb
	 where user_no = #{userNo}
</select>

<!-- 신고사유 셀렉 -->
<select id="selectReportReason" parameterType="int" resultType="String">
	select block_reason
	  from block_reason_tb
	 where block_code = #{blockCode}
</select>

<!-- 포스트넘버로 포스트 내용 셀렉 -->
<select id="selectPostContent" parameterType="int" resultType="String">
	select post_content
	  from board_tb
	 where post_no = #{postNo}
</select>

<!-- 신고목록 셀렉 처리된거 -->
<select id="selectReportY" resultType="Report">
	select *
	  from report_tb
  	 where report_status = 'Y'
  order by report_no desc
</select>

<!-- 신고하기 -->
<insert id="insertReport" parameterType="Report">
	insert into report_tb (
		block_code, post_no, user_no, cmt_no, report_content
	) values (
		#{blockCode}, #{postNo}, #{userNo}, #{cmtNo}, #{reportContent}
	)
</insert>

<!-- 신고 상태 업데이트 -->
<update id="updateReport" parameterType="int">
	update report_tb
	   set report_status = 'Y'
	 where report_no = #{reportNo}
</update>

<!-- postNo받아서 board 1개 셀렉 -->
<select id="selectOneBoardUsingNo" parameterType="int" resultType="Board">
	select *
	  from board_tb
	 where post_no = #{postNo}
</select>
<!-- commentNo받아서 comment 1개 셀렉 -->
<select id="selectOneCommentUsingNo" parameterType="int" resultType="Comment">
	select *
	  from comment_tb
	 where cmt_no = #{cmtNo}
</select>
<!-- postNo받아서 project_tb타고 userNo 받아서 유저테이블에서 user를 1개 뽑아버리기 -->
<select id="selectOneUserUsingPostNo" parameterType="int" resultType="UserVO">
	select *
	  from user_tb u
	 WHERE u.user_no = (select p.user_no
	 						 from project_tb p
	 						 WHERE p.project_no = (SELECT b.project_no
	 												 from board_tb b
							 					    WHERE post_no = #{postNO}
							 							 )
								)
</select>
<!-- commentNo받아서 userNo 받아서 유저테이블에서 user를 1개 뽑아버리기 -->
<select id="selectOneUserUsingCommentNo" parameterType="int" resultType="UserVO">
	select *
	  from user_tb u
	 WHERE u.user_no = (select c.user_no
	 						 from comment_tb c
	 						 WHERE c.cmt_no = #{commentNo}
						)
</select>




<!-- 리포트넘버로 1개 리포트셀렉 -->
<select id="selectOneReport" parameterType="int" resultType="Report">
	select *
	  from report_tb
	 where report_no = #{reportNo}
</select>

<!-- 지금부터 코멘트와 유저와 포스트 객체를 매칭하는걸로 하나씩 뽑아오는 쿼리를 시작한다. -->
<!-- 코멘트 VO뽑기 -->
<select id="selectOneComment" parameterType="Report" resultType="Comment">
	select *
	  from comment_tb
	 where cmt_no = #{cmtNo}
</select>
<!-- User Vo뽑기 -->
<select id="selectOneUser" parameterType="Report" resultType="UserVO">
	select *
	  from user_tb
	 where user_no = #{userNo}
</select>
<!-- Board 뽑기 -->
<select id="selectOneBoard" parameterType="Report" resultType="Board">
	select *
	  from board_tb
	 where post_no = #{postNo}
</select>
<!-- 코멘트를 넣어서, 유저no을 이용해 유저ID를 셀렉 -->
<select id="selectOneUserByComment" parameterType="Comment" resultType="UserVO">
	select *
	  from user_tb
	 where user_no = #{userNo}
</select>

<select id="chkUser" resultType="int" parameterType="hashmap">
	select count(*)
	  from user_tb
	 <where>
	 	<choose>
	 		<when test="chkType == 'userId'">
	 			and user_id = #{chkValue}
	 		</when>
	 		<when test="chkType == 'userNickname'">
	 			and user_nickname = #{chkValue}
	 		</when>
	 	</choose>
	 </where> 
</select>


		<!-- 리포트에 있는 유저넘버를 이용해 block_tb에 그 유저에 대한게 있는지 조사 하는 쿼리 -->
		<select id="selectBlock" parameterType="int" resultType="Block">
			select *
			  from block_tb
			 where user_no = #{userNo}
		</select>
		<!-- 승인거절처리시 리포트넘버만 이용해서 스테이터스값을 Y로 변경 -->
		<update id="denyReportStatus" parameterType="int">
			update report_tb
			   set report_status = 'Y'
			 where report_no = #{reportNo}
		</update>
		<!-- 유저 그 기간만큼 정지처리하고, 리포트의 상태값 처리됨으로 변경 -->
		<!-- 새로운 block insert -->
		<insert id="insertBlock" parameterType="hashmap">
			insert into block_tb(user_no, block_code,block_end_dt)
			values(#{userNo}, #{blockCode}, STR_TO_DATE(#{blockDate}, '%Y-%m-%d'))
		</insert>
		<!-- report_tb의 status값을 변경 -->
		<update id="updateReportStatus" parameterType="hashmap">
			update report_tb
			   set report_status = 'Y'
			 where report_no = #{reportNo}
		</update>
		<!-- block delete -->
		<delete id="deleteBlock" parameterType="hashmap">
			delete from block_tb
			where user_no = #{userNo}
		</delete>
		
		<!-- 페이징 관련 시작 -->
		<!-- selectReportPaging(@Param("pagenum") int pagenum, @Param("contentnum") int contentnum);
		int reportcount(); -->
		<select id="selectReportPaging" resultType="Report" parameterType="Criteria">
			select * from report_tb
			order by report_status ASC, report_no DESC
			limit #{pageStart}, #{perPageNum}
		</select>
		<select id="reportCount" resultType="int">
			select count(*) from report_tb
		</select>
		
		<!-- 신고글 자체를 삭제처리 -->
		<delete id="deleteReport" parameterType="int">
			delete
			  from report_tb
			 where report_no = #{reportNo} 
		</delete>
		
<!-- 	<select id="selectBoard" resultType="Board"> -->
<!-- 		select * -->
<!-- 		  from tb_board -->
<!-- 		 order by no desc   -->
<!-- 	</select> -->
<!-- 	<select id="selectOneBoard" parameterType="int" resultType="Board"> -->
<!-- 		select * -->
<!-- 		  from tb_board -->
<!-- 		 where no = #{no}  -->
<!-- 	</select> -->
<!-- 	<insert id="insertBoard" parameterType="Board"> -->
<!-- 		insert into tb_board ( -->
<!-- 			no, title, writer, content -->
<!-- 		) values ( -->
<!-- 			seq_board_no.nextval, #{title}, #{writer}, #{content} -->
<!-- 		) -->
<!-- 	</insert> -->
<!-- 	<update id="updateViewCnt" parameterType="int"> -->
<!-- 		update tb_board  -->
<!-- 		   set view_cnt = view_cnt + 1 -->
<!-- 		 where no = #{no} -->
<!-- 	</update> -->
<!-- 	<update id="updateBoard" parameterType="Board"> -->
<!-- 		update tb_board  -->
<!-- 		   set title = #{title},  -->
<!-- 		       content = #{content} -->
<!-- 		 where no = #{no} -->
<!-- 	</update> -->
<!-- 	<delete id="deleteBoard" parameterType="int"> -->
<!-- 		delete  -->
<!-- 		  from tb_board  -->
<!-- 		 where no = #{no} -->
<!-- 	</delete> -->
	
	<!-- 댓글 파트 ============================================= -->
<!-- 	<select id="selectComment" parameterType="int" resultType="Comment"> -->
<!-- 	    select * -->
<!-- 	      from tb_comment -->
<!-- 	     where no = #{no} -->
<!-- 	     order by comment_no  -->
<!-- 	</select>	 -->
	
<!-- 	<insert id="insertComment" parameterType="Comment"> -->
<!-- 		insert into tb_comment( -->
<!-- 			comment_no, no, writer, content -->
<!-- 		) values ( -->
<!-- 			seq_comment_no.nextVal, #{no}, #{writer}, #{content} -->
<!-- 		) -->
<!-- 	</insert>	 -->
			
<!-- 	<delete id="deleteComment" parameterType="int"> -->
<!-- 	    delete  -->
<!-- 	      from tb_comment -->
<!-- 	     where comment_no = #{commentNo} -->
<!-- 	</delete>	 -->
	
<!-- 	<update id="updateComment" parameterType="comment"> -->
<!-- 	    update tb_comment -->
<!-- 	       set content = #{content} -->
<!-- 	     where comment_no = #{commentNo} -->
<!-- 	</update> -->
</mapper>
